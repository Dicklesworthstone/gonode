// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package supernode_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtworkClient is the client API for Artwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtworkClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Artwork_RegisterClient, error)
	SuperNode(ctx context.Context, opts ...grpc.CallOption) (Artwork_SuperNodeClient, error)
}

type artworkClient struct {
	cc grpc.ClientConnInterface
}

func NewArtworkClient(cc grpc.ClientConnInterface) ArtworkClient {
	return &artworkClient{cc}
}

func (c *artworkClient) Register(ctx context.Context, opts ...grpc.CallOption) (Artwork_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Artwork_ServiceDesc.Streams[0], "/supernode.Artwork/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &artworkRegisterClient{stream}
	return x, nil
}

type Artwork_RegisterClient interface {
	Send(*RegisterRequest) error
	Recv() (*RegisterReply, error)
	grpc.ClientStream
}

type artworkRegisterClient struct {
	grpc.ClientStream
}

func (x *artworkRegisterClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *artworkRegisterClient) Recv() (*RegisterReply, error) {
	m := new(RegisterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *artworkClient) SuperNode(ctx context.Context, opts ...grpc.CallOption) (Artwork_SuperNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Artwork_ServiceDesc.Streams[1], "/supernode.Artwork/SuperNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &artworkSuperNodeClient{stream}
	return x, nil
}

type Artwork_SuperNodeClient interface {
	Send(*SuperNodeRequest) error
	Recv() (*SuperNodeReply, error)
	grpc.ClientStream
}

type artworkSuperNodeClient struct {
	grpc.ClientStream
}

func (x *artworkSuperNodeClient) Send(m *SuperNodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *artworkSuperNodeClient) Recv() (*SuperNodeReply, error) {
	m := new(SuperNodeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtworkServer is the server API for Artwork service.
// All implementations must embed UnimplementedArtworkServer
// for forward compatibility
type ArtworkServer interface {
	Register(Artwork_RegisterServer) error
	SuperNode(Artwork_SuperNodeServer) error
	mustEmbedUnimplementedArtworkServer()
}

// UnimplementedArtworkServer must be embedded to have forward compatible implementations.
type UnimplementedArtworkServer struct {
}

func (UnimplementedArtworkServer) Register(Artwork_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedArtworkServer) SuperNode(Artwork_SuperNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method SuperNode not implemented")
}
func (UnimplementedArtworkServer) mustEmbedUnimplementedArtworkServer() {}

// UnsafeArtworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtworkServer will
// result in compilation errors.
type UnsafeArtworkServer interface {
	mustEmbedUnimplementedArtworkServer()
}

func RegisterArtworkServer(s grpc.ServiceRegistrar, srv ArtworkServer) {
	s.RegisterService(&Artwork_ServiceDesc, srv)
}

func _Artwork_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArtworkServer).Register(&artworkRegisterServer{stream})
}

type Artwork_RegisterServer interface {
	Send(*RegisterReply) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type artworkRegisterServer struct {
	grpc.ServerStream
}

func (x *artworkRegisterServer) Send(m *RegisterReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *artworkRegisterServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Artwork_SuperNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArtworkServer).SuperNode(&artworkSuperNodeServer{stream})
}

type Artwork_SuperNodeServer interface {
	Send(*SuperNodeReply) error
	Recv() (*SuperNodeRequest, error)
	grpc.ServerStream
}

type artworkSuperNodeServer struct {
	grpc.ServerStream
}

func (x *artworkSuperNodeServer) Send(m *SuperNodeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *artworkSuperNodeServer) Recv() (*SuperNodeRequest, error) {
	m := new(SuperNodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Artwork_ServiceDesc is the grpc.ServiceDesc for Artwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Artwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.Artwork",
	HandlerType: (*ArtworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Artwork_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SuperNode",
			Handler:       _Artwork_SuperNode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "supernode.proto",
}
