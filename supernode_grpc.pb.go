// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package supernode_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterArtworkInternalClient is the client API for RegisterArtworkInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterArtworkInternalClient interface {
	SendRegTicket(ctx context.Context, in *SendRegTicketRequest, opts ...grpc.CallOption) (*Empty, error)
}

type registerArtworkInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterArtworkInternalClient(cc grpc.ClientConnInterface) RegisterArtworkInternalClient {
	return &registerArtworkInternalClient{cc}
}

func (c *registerArtworkInternalClient) SendRegTicket(ctx context.Context, in *SendRegTicketRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/supernode.RegisterArtworkInternal/SendRegTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterArtworkInternalServer is the server API for RegisterArtworkInternal service.
// All implementations must embed UnimplementedRegisterArtworkInternalServer
// for forward compatibility
type RegisterArtworkInternalServer interface {
	SendRegTicket(context.Context, *SendRegTicketRequest) (*Empty, error)
	mustEmbedUnimplementedRegisterArtworkInternalServer()
}

// UnimplementedRegisterArtworkInternalServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterArtworkInternalServer struct {
}

func (UnimplementedRegisterArtworkInternalServer) SendRegTicket(context.Context, *SendRegTicketRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegTicket not implemented")
}
func (UnimplementedRegisterArtworkInternalServer) mustEmbedUnimplementedRegisterArtworkInternalServer() {
}

// UnsafeRegisterArtworkInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterArtworkInternalServer will
// result in compilation errors.
type UnsafeRegisterArtworkInternalServer interface {
	mustEmbedUnimplementedRegisterArtworkInternalServer()
}

func RegisterRegisterArtworkInternalServer(s grpc.ServiceRegistrar, srv RegisterArtworkInternalServer) {
	s.RegisterService(&RegisterArtworkInternal_ServiceDesc, srv)
}

func _RegisterArtworkInternal_SendRegTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkInternalServer).SendRegTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.RegisterArtworkInternal/SendRegTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkInternalServer).SendRegTicket(ctx, req.(*SendRegTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterArtworkInternal_ServiceDesc is the grpc.ServiceDesc for RegisterArtworkInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterArtworkInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.RegisterArtworkInternal",
	HandlerType: (*RegisterArtworkInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRegTicket",
			Handler:    _RegisterArtworkInternal_SendRegTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supernode.proto",
}

// RegisterArtworkClient is the client API for RegisterArtwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterArtworkClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error)
	AcceptConnection(ctx context.Context, in *AcceptConnectionRequest, opts ...grpc.CallOption) (*AcceptConnectionReply, error)
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageReply, error)
	SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error)
}

type registerArtworkClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterArtworkClient(cc grpc.ClientConnInterface) RegisterArtworkClient {
	return &registerArtworkClient{cc}
}

func (c *registerArtworkClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, "/supernode.RegisterArtwork/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerArtworkClient) AcceptConnection(ctx context.Context, in *AcceptConnectionRequest, opts ...grpc.CallOption) (*AcceptConnectionReply, error) {
	out := new(AcceptConnectionReply)
	err := c.cc.Invoke(ctx, "/supernode.RegisterArtwork/AcceptConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerArtworkClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageReply, error) {
	out := new(UploadImageReply)
	err := c.cc.Invoke(ctx, "/supernode.RegisterArtwork/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerArtworkClient) SendTicket(ctx context.Context, in *SendTicketRequest, opts ...grpc.CallOption) (*SendTicketReply, error) {
	out := new(SendTicketReply)
	err := c.cc.Invoke(ctx, "/supernode.RegisterArtwork/SendTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterArtworkServer is the server API for RegisterArtwork service.
// All implementations must embed UnimplementedRegisterArtworkServer
// for forward compatibility
type RegisterArtworkServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectReply, error)
	AcceptConnection(context.Context, *AcceptConnectionRequest) (*AcceptConnectionReply, error)
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageReply, error)
	SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error)
	mustEmbedUnimplementedRegisterArtworkServer()
}

// UnimplementedRegisterArtworkServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterArtworkServer struct {
}

func (UnimplementedRegisterArtworkServer) Connect(context.Context, *ConnectRequest) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedRegisterArtworkServer) AcceptConnection(context.Context, *AcceptConnectionRequest) (*AcceptConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptConnection not implemented")
}
func (UnimplementedRegisterArtworkServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedRegisterArtworkServer) SendTicket(context.Context, *SendTicketRequest) (*SendTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}
func (UnimplementedRegisterArtworkServer) mustEmbedUnimplementedRegisterArtworkServer() {}

// UnsafeRegisterArtworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterArtworkServer will
// result in compilation errors.
type UnsafeRegisterArtworkServer interface {
	mustEmbedUnimplementedRegisterArtworkServer()
}

func RegisterRegisterArtworkServer(s grpc.ServiceRegistrar, srv RegisterArtworkServer) {
	s.RegisterService(&RegisterArtwork_ServiceDesc, srv)
}

func _RegisterArtwork_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.RegisterArtwork/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterArtwork_AcceptConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).AcceptConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.RegisterArtwork/AcceptConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).AcceptConnection(ctx, req.(*AcceptConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterArtwork_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.RegisterArtwork/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterArtwork_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtworkServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.RegisterArtwork/SendTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtworkServer).SendTicket(ctx, req.(*SendTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterArtwork_ServiceDesc is the grpc.ServiceDesc for RegisterArtwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterArtwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.RegisterArtwork",
	HandlerType: (*RegisterArtworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _RegisterArtwork_Connect_Handler,
		},
		{
			MethodName: "AcceptConnection",
			Handler:    _RegisterArtwork_AcceptConnection_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _RegisterArtwork_UploadImage_Handler,
		},
		{
			MethodName: "SendTicket",
			Handler:    _RegisterArtwork_SendTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supernode.proto",
}
