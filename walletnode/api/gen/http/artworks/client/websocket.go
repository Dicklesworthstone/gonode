// Code generated by goa v3.4.2, DO NOT EDIT.
//
// artworks WebSocket client streaming
//
// Command:
// $ goa gen github.com/pastelnetwork/gonode/walletnode/api/design

package client

import (
	"io"

	"github.com/gorilla/websocket"
	artworks "github.com/pastelnetwork/gonode/walletnode/api/gen/artworks"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "artworks" service.
type ConnConfigurer struct {
	RegisterTaskStateFn goahttp.ConnConfigureFunc
	SearchFn            goahttp.ConnConfigureFunc
}

// RegisterTaskStateClientStream implements the
// artworks.RegisterTaskStateClientStream interface.
type RegisterTaskStateClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// SearchClientStream implements the artworks.SearchClientStream interface.
type SearchClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "artworks" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		RegisterTaskStateFn: fn,
		SearchFn:            fn,
	}
}

// Recv reads instances of "artworks.TaskState" from the "registerTaskState"
// endpoint websocket connection.
func (s *RegisterTaskStateClientStream) Recv() (*artworks.TaskState, error) {
	var (
		rv   *artworks.TaskState
		body RegisterTaskStateResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateRegisterTaskStateResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewRegisterTaskStateTaskStateOK(&body)
	return res, nil
}

// Recv reads instances of "artworks.ArtworkTicket" from the "search" endpoint
// websocket connection.
func (s *SearchClientStream) Recv() (*artworks.ArtworkTicket, error) {
	var (
		rv   *artworks.ArtworkTicket
		body SearchResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateSearchResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewSearchArtworkTicketOK(&body)
	return res, nil
}
