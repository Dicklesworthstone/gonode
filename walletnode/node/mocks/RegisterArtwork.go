// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	image "github.com/pastelnetwork/gonode/common/service/image"
	mock "github.com/stretchr/testify/mock"
)

// RegisterArtwork is an autogenerated mock type for the RegisterArtwork type
type RegisterArtwork struct {
	mock.Mock
}

// AcceptedNodes provides a mock function with given fields: ctx
func (_m *RegisterArtwork) AcceptedNodes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectTo provides a mock function with given fields: ctx, nodeKey, sessID
func (_m *RegisterArtwork) ConnectTo(ctx context.Context, nodeKey string, sessID string) error {
	ret := _m.Called(ctx, nodeKey, sessID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, nodeKey, sessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessID provides a mock function with given fields:
func (_m *RegisterArtwork) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, IsPrimary
func (_m *RegisterArtwork) Session(ctx context.Context, IsPrimary bool) error {
	ret := _m.Called(ctx, IsPrimary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, IsPrimary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadImage provides a mock function with given fields: ctx, file
func (_m *RegisterArtwork) UploadImage(ctx context.Context, file *image.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *image.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
