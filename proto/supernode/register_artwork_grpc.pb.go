// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterArtowrkClient is the client API for RegisterArtowrk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterArtowrkClient interface {
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (RegisterArtowrk_HealthCheckClient, error)
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeReply, error)
}

type registerArtowrkClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterArtowrkClient(cc grpc.ClientConnInterface) RegisterArtowrkClient {
	return &registerArtowrkClient{cc}
}

func (c *registerArtowrkClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (RegisterArtowrk_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterArtowrk_ServiceDesc.Streams[0], "/supernode.RegisterArtowrk/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerArtowrkHealthCheckClient{stream}
	return x, nil
}

type RegisterArtowrk_HealthCheckClient interface {
	Send(*Empty) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type registerArtowrkHealthCheckClient struct {
	grpc.ClientStream
}

func (x *registerArtowrkHealthCheckClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerArtowrkHealthCheckClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerArtowrkClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeReply, error) {
	out := new(HandshakeReply)
	err := c.cc.Invoke(ctx, "/supernode.RegisterArtowrk/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterArtowrkServer is the server API for RegisterArtowrk service.
// All implementations must embed UnimplementedRegisterArtowrkServer
// for forward compatibility
type RegisterArtowrkServer interface {
	HealthCheck(RegisterArtowrk_HealthCheckServer) error
	Handshake(context.Context, *HandshakeRequest) (*HandshakeReply, error)
	mustEmbedUnimplementedRegisterArtowrkServer()
}

// UnimplementedRegisterArtowrkServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterArtowrkServer struct {
}

func (UnimplementedRegisterArtowrkServer) HealthCheck(RegisterArtowrk_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRegisterArtowrkServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedRegisterArtowrkServer) mustEmbedUnimplementedRegisterArtowrkServer() {}

// UnsafeRegisterArtowrkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterArtowrkServer will
// result in compilation errors.
type UnsafeRegisterArtowrkServer interface {
	mustEmbedUnimplementedRegisterArtowrkServer()
}

func RegisterRegisterArtowrkServer(s grpc.ServiceRegistrar, srv RegisterArtowrkServer) {
	s.RegisterService(&RegisterArtowrk_ServiceDesc, srv)
}

func _RegisterArtowrk_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterArtowrkServer).HealthCheck(&registerArtowrkHealthCheckServer{stream})
}

type RegisterArtowrk_HealthCheckServer interface {
	Send(*Empty) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type registerArtowrkHealthCheckServer struct {
	grpc.ServerStream
}

func (x *registerArtowrkHealthCheckServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerArtowrkHealthCheckServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterArtowrk_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterArtowrkServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supernode.RegisterArtowrk/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterArtowrkServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterArtowrk_ServiceDesc is the grpc.ServiceDesc for RegisterArtowrk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterArtowrk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.RegisterArtowrk",
	HandlerType: (*RegisterArtowrkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _RegisterArtowrk_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _RegisterArtowrk_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "supernode/register_artwork.proto",
}
