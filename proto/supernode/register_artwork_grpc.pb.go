// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterArtowrkClient is the client API for RegisterArtowrk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterArtowrkClient interface {
	// Session informs primary supernode about its `nodeID` and `sessID` it wants to connect to.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(ctx context.Context, opts ...grpc.CallOption) (RegisterArtowrk_SessionClient, error)
}

type registerArtowrkClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterArtowrkClient(cc grpc.ClientConnInterface) RegisterArtowrkClient {
	return &registerArtowrkClient{cc}
}

func (c *registerArtowrkClient) Session(ctx context.Context, opts ...grpc.CallOption) (RegisterArtowrk_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterArtowrk_ServiceDesc.Streams[0], "/supernode.RegisterArtowrk/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerArtowrkSessionClient{stream}
	return x, nil
}

type RegisterArtowrk_SessionClient interface {
	Send(*SessionRequest) error
	Recv() (*SessionReply, error)
	grpc.ClientStream
}

type registerArtowrkSessionClient struct {
	grpc.ClientStream
}

func (x *registerArtowrkSessionClient) Send(m *SessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerArtowrkSessionClient) Recv() (*SessionReply, error) {
	m := new(SessionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterArtowrkServer is the server API for RegisterArtowrk service.
// All implementations must embed UnimplementedRegisterArtowrkServer
// for forward compatibility
type RegisterArtowrkServer interface {
	// Session informs primary supernode about its `nodeID` and `sessID` it wants to connect to.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(RegisterArtowrk_SessionServer) error
	mustEmbedUnimplementedRegisterArtowrkServer()
}

// UnimplementedRegisterArtowrkServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterArtowrkServer struct {
}

func (UnimplementedRegisterArtowrkServer) Session(RegisterArtowrk_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedRegisterArtowrkServer) mustEmbedUnimplementedRegisterArtowrkServer() {}

// UnsafeRegisterArtowrkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterArtowrkServer will
// result in compilation errors.
type UnsafeRegisterArtowrkServer interface {
	mustEmbedUnimplementedRegisterArtowrkServer()
}

func RegisterRegisterArtowrkServer(s grpc.ServiceRegistrar, srv RegisterArtowrkServer) {
	s.RegisterService(&RegisterArtowrk_ServiceDesc, srv)
}

func _RegisterArtowrk_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterArtowrkServer).Session(&registerArtowrkSessionServer{stream})
}

type RegisterArtowrk_SessionServer interface {
	Send(*SessionReply) error
	Recv() (*SessionRequest, error)
	grpc.ServerStream
}

type registerArtowrkSessionServer struct {
	grpc.ServerStream
}

func (x *registerArtowrkSessionServer) Send(m *SessionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerArtowrkSessionServer) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterArtowrk_ServiceDesc is the grpc.ServiceDesc for RegisterArtowrk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterArtowrk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.RegisterArtowrk",
	HandlerType: (*RegisterArtowrkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _RegisterArtowrk_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "supernode/register_artwork.proto",
}
