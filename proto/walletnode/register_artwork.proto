syntax = "proto3";

option go_package = "github.com/pastelnetwork/gonode/proto/walletnode";

package walletnode;

service RegisterArtwork {
    // Session informs the supernode its position (primary/secondary).
    // Returns `SessID` that are used by all other rpc methods to identify the task on the supernode. By sending `sessID` in the Metadata.
    // The stream is used by the parties to inform each other about the cancellation of the task.
    rpc Session(stream SessionRequest) returns (stream SessionReply);

    // AcceptedNodes returns peers of the secondary supernodes connected to it.
    rpc AcceptedNodes(AcceptedNodesRequest) returns (AcceptedNodesReply);

    // ConnectTo requests to connect to the primary supernode.
    rpc ConnectTo(ConnectToRequest) returns (ConnectToReply);

    // ProbeImage uploads the resampled image compute and return a fingerpirnt.
    rpc ProbeImage(stream ProbeImageRequest) returns (ProbeImageReply);

    // SendArtTicket sends a signed art-ticket to the supernode.
    rpc SendSignedArtTicket(SendSignedArtTicketRequest) returns (SendSignedArtTicketReply);

    // SendPreBurntTxFeeId sends tx_id of 10% burnt transaction fee to the supernode.
    rpc SendPreBurntTxFeeId(SendPreBurntTxFeeIdRequest) returns (SendPreBurntTxFeeIdReply);

    // SendTicket sends a ticket to the supernode.
    rpc SendTicket(SendTicketRequest) returns (SendTicketReply);
}

message SessionRequest {
    bool is_primary = 1;
}
message SessionReply {
    string sessID = 1;
}

message AcceptedNodesRequest {
}
message AcceptedNodesReply {
    message Peer {
        string nodeID = 1;
    }
    repeated Peer peers = 1;
}

message ConnectToRequest {
    string sessID = 1;
    string nodeID = 2;
}
message ConnectToReply {
}

message ProbeImageRequest {
    bytes payload = 1;
}
message ProbeImageReply {
    bytes fingerprint = 1;
}

message SendSignedArtTicketRequest {
    bytes art_ticket = 1;
    bytes artist_signature = 2;
}
message SendSignedArtTicketReply {
    int64 registration_fee = 1;
}

message SendPreBurntTxFeeIdRequest {
    string txid = 1;
}
message SendPreBurntTxFeeIdReply {
}

message SendTicketRequest {
    bytes ticket = 1;
    string ticket_signature = 2;
    string fgpt= 3;
    string fgpt_signature = 4;
    string fee_txid = 5;
    bytes thumbnail = 6;
}
message SendTicketReply {
    string ticket_txid = 1;
}

