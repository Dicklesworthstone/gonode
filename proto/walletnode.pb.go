// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: walletnode.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletNodeRegisterArtworkReply_Error_Status int32

const (
	WalletNodeRegisterArtworkReply_Error_OK  WalletNodeRegisterArtworkReply_Error_Status = 0
	WalletNodeRegisterArtworkReply_Error_ERR WalletNodeRegisterArtworkReply_Error_Status = 1
)

// Enum value maps for WalletNodeRegisterArtworkReply_Error_Status.
var (
	WalletNodeRegisterArtworkReply_Error_Status_name = map[int32]string{
		0: "OK",
		1: "ERR",
	}
	WalletNodeRegisterArtworkReply_Error_Status_value = map[string]int32{
		"OK":  0,
		"ERR": 1,
	}
)

func (x WalletNodeRegisterArtworkReply_Error_Status) Enum() *WalletNodeRegisterArtworkReply_Error_Status {
	p := new(WalletNodeRegisterArtworkReply_Error_Status)
	*p = x
	return p
}

func (x WalletNodeRegisterArtworkReply_Error_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletNodeRegisterArtworkReply_Error_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_walletnode_proto_enumTypes[0].Descriptor()
}

func (WalletNodeRegisterArtworkReply_Error_Status) Type() protoreflect.EnumType {
	return &file_walletnode_proto_enumTypes[0]
}

func (x WalletNodeRegisterArtworkReply_Error_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_Error_Status.Descriptor instead.
func (WalletNodeRegisterArtworkReply_Error_Status) EnumDescriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 0, 0}
}

type WalletNodeRegisterArtworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestOneof:
	//	*WalletNodeRegisterArtworkRequest_PrimaryNode
	//	*WalletNodeRegisterArtworkRequest_SecondaryNode
	//	*WalletNodeRegisterArtworkRequest_UploadImage
	//	*WalletNodeRegisterArtworkRequest_SendTicket
	TestOneof isWalletNodeRegisterArtworkRequest_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *WalletNodeRegisterArtworkRequest) Reset() {
	*x = WalletNodeRegisterArtworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkRequest) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkRequest.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{0}
}

func (m *WalletNodeRegisterArtworkRequest) GetTestOneof() isWalletNodeRegisterArtworkRequest_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *WalletNodeRegisterArtworkRequest) GetPrimaryNode() *WalletNodeRegisterArtworkRequest_PrimaryNodeRequest {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkRequest_PrimaryNode); ok {
		return x.PrimaryNode
	}
	return nil
}

func (x *WalletNodeRegisterArtworkRequest) GetSecondaryNode() *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkRequest_SecondaryNode); ok {
		return x.SecondaryNode
	}
	return nil
}

func (x *WalletNodeRegisterArtworkRequest) GetUploadImage() *WalletNodeRegisterArtworkRequest_UploadImageRequest {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkRequest_UploadImage); ok {
		return x.UploadImage
	}
	return nil
}

func (x *WalletNodeRegisterArtworkRequest) GetSendTicket() *WalletNodeRegisterArtworkRequest_SendTicketRequest {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkRequest_SendTicket); ok {
		return x.SendTicket
	}
	return nil
}

type isWalletNodeRegisterArtworkRequest_TestOneof interface {
	isWalletNodeRegisterArtworkRequest_TestOneof()
}

type WalletNodeRegisterArtworkRequest_PrimaryNode struct {
	PrimaryNode *WalletNodeRegisterArtworkRequest_PrimaryNodeRequest `protobuf:"bytes,1,opt,name=primary_node,json=primaryNode,proto3,oneof"`
}

type WalletNodeRegisterArtworkRequest_SecondaryNode struct {
	SecondaryNode *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest `protobuf:"bytes,2,opt,name=secondary_node,json=secondaryNode,proto3,oneof"`
}

type WalletNodeRegisterArtworkRequest_UploadImage struct {
	UploadImage *WalletNodeRegisterArtworkRequest_UploadImageRequest `protobuf:"bytes,3,opt,name=upload_image,json=uploadImage,proto3,oneof"`
}

type WalletNodeRegisterArtworkRequest_SendTicket struct {
	SendTicket *WalletNodeRegisterArtworkRequest_SendTicketRequest `protobuf:"bytes,4,opt,name=send_ticket,json=sendTicket,proto3,oneof"`
}

func (*WalletNodeRegisterArtworkRequest_PrimaryNode) isWalletNodeRegisterArtworkRequest_TestOneof() {}

func (*WalletNodeRegisterArtworkRequest_SecondaryNode) isWalletNodeRegisterArtworkRequest_TestOneof() {
}

func (*WalletNodeRegisterArtworkRequest_UploadImage) isWalletNodeRegisterArtworkRequest_TestOneof() {}

func (*WalletNodeRegisterArtworkRequest_SendTicket) isWalletNodeRegisterArtworkRequest_TestOneof() {}

type WalletNodeRegisterArtworkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestOneof:
	//	*WalletNodeRegisterArtworkReply_PrimaryNode
	//	*WalletNodeRegisterArtworkReply_SecondaryNode
	//	*WalletNodeRegisterArtworkReply_UploadImage
	//	*WalletNodeRegisterArtworkReply_SendTicket
	TestOneof isWalletNodeRegisterArtworkReply_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *WalletNodeRegisterArtworkReply) Reset() {
	*x = WalletNodeRegisterArtworkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1}
}

func (m *WalletNodeRegisterArtworkReply) GetTestOneof() isWalletNodeRegisterArtworkReply_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *WalletNodeRegisterArtworkReply) GetPrimaryNode() *WalletNodeRegisterArtworkReply_PrimaryNodeReply {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkReply_PrimaryNode); ok {
		return x.PrimaryNode
	}
	return nil
}

func (x *WalletNodeRegisterArtworkReply) GetSecondaryNode() *WalletNodeRegisterArtworkReply_SecondaryNodeReply {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkReply_SecondaryNode); ok {
		return x.SecondaryNode
	}
	return nil
}

func (x *WalletNodeRegisterArtworkReply) GetUploadImage() *WalletNodeRegisterArtworkReply_UploadImageReply {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkReply_UploadImage); ok {
		return x.UploadImage
	}
	return nil
}

func (x *WalletNodeRegisterArtworkReply) GetSendTicket() *WalletNodeRegisterArtworkReply_SendTicketReply {
	if x, ok := x.GetTestOneof().(*WalletNodeRegisterArtworkReply_SendTicket); ok {
		return x.SendTicket
	}
	return nil
}

type isWalletNodeRegisterArtworkReply_TestOneof interface {
	isWalletNodeRegisterArtworkReply_TestOneof()
}

type WalletNodeRegisterArtworkReply_PrimaryNode struct {
	PrimaryNode *WalletNodeRegisterArtworkReply_PrimaryNodeReply `protobuf:"bytes,1,opt,name=primary_node,json=primaryNode,proto3,oneof"`
}

type WalletNodeRegisterArtworkReply_SecondaryNode struct {
	SecondaryNode *WalletNodeRegisterArtworkReply_SecondaryNodeReply `protobuf:"bytes,2,opt,name=secondary_node,json=secondaryNode,proto3,oneof"`
}

type WalletNodeRegisterArtworkReply_UploadImage struct {
	UploadImage *WalletNodeRegisterArtworkReply_UploadImageReply `protobuf:"bytes,3,opt,name=upload_image,json=uploadImage,proto3,oneof"`
}

type WalletNodeRegisterArtworkReply_SendTicket struct {
	SendTicket *WalletNodeRegisterArtworkReply_SendTicketReply `protobuf:"bytes,4,opt,name=send_ticket,json=sendTicket,proto3,oneof"`
}

func (*WalletNodeRegisterArtworkReply_PrimaryNode) isWalletNodeRegisterArtworkReply_TestOneof() {}

func (*WalletNodeRegisterArtworkReply_SecondaryNode) isWalletNodeRegisterArtworkReply_TestOneof() {}

func (*WalletNodeRegisterArtworkReply_UploadImage) isWalletNodeRegisterArtworkReply_TestOneof() {}

func (*WalletNodeRegisterArtworkReply_SendTicket) isWalletNodeRegisterArtworkReply_TestOneof() {}

type WalletNodeRegisterArtworkRequest_PrimaryNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnID string `protobuf:"bytes,1,opt,name=connID,proto3" json:"connID,omitempty"`
}

func (x *WalletNodeRegisterArtworkRequest_PrimaryNodeRequest) Reset() {
	*x = WalletNodeRegisterArtworkRequest_PrimaryNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkRequest_PrimaryNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkRequest_PrimaryNodeRequest) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkRequest_PrimaryNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkRequest_PrimaryNodeRequest.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkRequest_PrimaryNodeRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WalletNodeRegisterArtworkRequest_PrimaryNodeRequest) GetConnID() string {
	if x != nil {
		return x.ConnID
	}
	return ""
}

type WalletNodeRegisterArtworkRequest_SecondaryNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnID         string `protobuf:"bytes,1,opt,name=connID,proto3" json:"connID,omitempty"`
	PrimaryNodeKey string `protobuf:"bytes,2,opt,name=primary_node_key,json=primaryNodeKey,proto3" json:"primary_node_key,omitempty"`
}

func (x *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) Reset() {
	*x = WalletNodeRegisterArtworkRequest_SecondaryNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkRequest_SecondaryNodeRequest.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{0, 1}
}

func (x *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) GetConnID() string {
	if x != nil {
		return x.ConnID
	}
	return ""
}

func (x *WalletNodeRegisterArtworkRequest_SecondaryNodeRequest) GetPrimaryNodeKey() string {
	if x != nil {
		return x.PrimaryNodeKey
	}
	return ""
}

type WalletNodeRegisterArtworkRequest_UploadImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *WalletNodeRegisterArtworkRequest_UploadImageRequest) Reset() {
	*x = WalletNodeRegisterArtworkRequest_UploadImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkRequest_UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkRequest_UploadImageRequest) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkRequest_UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkRequest_UploadImageRequest.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkRequest_UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{0, 2}
}

func (x *WalletNodeRegisterArtworkRequest_UploadImageRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type WalletNodeRegisterArtworkRequest_SendTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket          []byte `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	TicketSignature string `protobuf:"bytes,2,opt,name=ticket_signature,json=ticketSignature,proto3" json:"ticket_signature,omitempty"`
	Fgpt            string `protobuf:"bytes,3,opt,name=fgpt,proto3" json:"fgpt,omitempty"`
	FgptSignature   string `protobuf:"bytes,4,opt,name=fgpt_signature,json=fgptSignature,proto3" json:"fgpt_signature,omitempty"`
	FeeTxid         string `protobuf:"bytes,5,opt,name=fee_txid,json=feeTxid,proto3" json:"fee_txid,omitempty"`
	Thumbnail       []byte `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) Reset() {
	*x = WalletNodeRegisterArtworkRequest_SendTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkRequest_SendTicketRequest) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkRequest_SendTicketRequest.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkRequest_SendTicketRequest) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{0, 3}
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) GetTicketSignature() string {
	if x != nil {
		return x.TicketSignature
	}
	return ""
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) GetFgpt() string {
	if x != nil {
		return x.Fgpt
	}
	return ""
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) GetFgptSignature() string {
	if x != nil {
		return x.FgptSignature
	}
	return ""
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) GetFeeTxid() string {
	if x != nil {
		return x.FeeTxid
	}
	return ""
}

func (x *WalletNodeRegisterArtworkRequest_SendTicketRequest) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type WalletNodeRegisterArtworkReply_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status WalletNodeRegisterArtworkReply_Error_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.WalletNodeRegisterArtworkReply_Error_Status" json:"status,omitempty"`
	ErrMsg string                                      `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *WalletNodeRegisterArtworkReply_Error) Reset() {
	*x = WalletNodeRegisterArtworkReply_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply_Error) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply_Error) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_Error.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply_Error) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 0}
}

func (x *WalletNodeRegisterArtworkReply_Error) GetStatus() WalletNodeRegisterArtworkReply_Error_Status {
	if x != nil {
		return x.Status
	}
	return WalletNodeRegisterArtworkReply_Error_OK
}

func (x *WalletNodeRegisterArtworkReply_Error) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type WalletNodeRegisterArtworkReply_PrimaryNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	Error *WalletNodeRegisterArtworkReply_Error                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply) Reset() {
	*x = WalletNodeRegisterArtworkReply_PrimaryNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply_PrimaryNodeReply) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_PrimaryNodeReply.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply_PrimaryNodeReply) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 1}
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply) GetPeers() []*WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply) GetError() *WalletNodeRegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type WalletNodeRegisterArtworkReply_SecondaryNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *WalletNodeRegisterArtworkReply_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WalletNodeRegisterArtworkReply_SecondaryNodeReply) Reset() {
	*x = WalletNodeRegisterArtworkReply_SecondaryNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply_SecondaryNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply_SecondaryNodeReply) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply_SecondaryNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_SecondaryNodeReply.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply_SecondaryNodeReply) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 2}
}

func (x *WalletNodeRegisterArtworkReply_SecondaryNodeReply) GetError() *WalletNodeRegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type WalletNodeRegisterArtworkReply_UploadImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fgpt  string                                `protobuf:"bytes,1,opt,name=fgpt,proto3" json:"fgpt,omitempty"`
	Error *WalletNodeRegisterArtworkReply_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WalletNodeRegisterArtworkReply_UploadImageReply) Reset() {
	*x = WalletNodeRegisterArtworkReply_UploadImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply_UploadImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply_UploadImageReply) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply_UploadImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_UploadImageReply.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply_UploadImageReply) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 3}
}

func (x *WalletNodeRegisterArtworkReply_UploadImageReply) GetFgpt() string {
	if x != nil {
		return x.Fgpt
	}
	return ""
}

func (x *WalletNodeRegisterArtworkReply_UploadImageReply) GetError() *WalletNodeRegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type WalletNodeRegisterArtworkReply_SendTicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketTxid string                                `protobuf:"bytes,1,opt,name=ticket_txid,json=ticketTxid,proto3" json:"ticket_txid,omitempty"`
	Error      *WalletNodeRegisterArtworkReply_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WalletNodeRegisterArtworkReply_SendTicketReply) Reset() {
	*x = WalletNodeRegisterArtworkReply_SendTicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply_SendTicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply_SendTicketReply) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply_SendTicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_SendTicketReply.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply_SendTicketReply) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 4}
}

func (x *WalletNodeRegisterArtworkReply_SendTicketReply) GetTicketTxid() string {
	if x != nil {
		return x.TicketTxid
	}
	return ""
}

func (x *WalletNodeRegisterArtworkReply_SendTicketReply) GetError() *WalletNodeRegisterArtworkReply_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondaryKey string `protobuf:"bytes,1,opt,name=secondary_key,json=secondaryKey,proto3" json:"secondary_key,omitempty"`
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer) Reset() {
	*x = WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_walletnode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer) ProtoMessage() {}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_walletnode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer.ProtoReflect.Descriptor instead.
func (*WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer) Descriptor() ([]byte, []int) {
	return file_walletnode_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer) GetSecondaryKey() string {
	if x != nil {
		return x.SecondaryKey
	}
	return ""
}

var File_walletnode_proto protoreflect.FileDescriptor

var file_walletnode_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x06, 0x0a, 0x20, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x65, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x2c, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x6e, 0x49, 0x44, 0x1a, 0x58, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x2a, 0x0a,
	0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x11, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x67, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x67, 0x70, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x67, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x65, 0x65, 0x54, 0x78, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x22, 0xc1, 0x08, 0x0a, 0x1e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x86,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x19, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x01, 0x1a, 0xd5, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x2b, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x1a,
	0x57, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x69, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x67, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x67, 0x70, 0x74,
	0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x75, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x78, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x73, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x74, 0x6f, 0x77, 0x72, 0x6b, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x27, 0x5a,
	0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x73, 0x74,
	0x65, 0x6c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_walletnode_proto_rawDescOnce sync.Once
	file_walletnode_proto_rawDescData = file_walletnode_proto_rawDesc
)

func file_walletnode_proto_rawDescGZIP() []byte {
	file_walletnode_proto_rawDescOnce.Do(func() {
		file_walletnode_proto_rawDescData = protoimpl.X.CompressGZIP(file_walletnode_proto_rawDescData)
	})
	return file_walletnode_proto_rawDescData
}

var file_walletnode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_walletnode_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_walletnode_proto_goTypes = []interface{}{
	(WalletNodeRegisterArtworkReply_Error_Status)(0),              // 0: proto.WalletNodeRegisterArtworkReply.Error.Status
	(*WalletNodeRegisterArtworkRequest)(nil),                      // 1: proto.WalletNodeRegisterArtworkRequest
	(*WalletNodeRegisterArtworkReply)(nil),                        // 2: proto.WalletNodeRegisterArtworkReply
	(*WalletNodeRegisterArtworkRequest_PrimaryNodeRequest)(nil),   // 3: proto.WalletNodeRegisterArtworkRequest.PrimaryNodeRequest
	(*WalletNodeRegisterArtworkRequest_SecondaryNodeRequest)(nil), // 4: proto.WalletNodeRegisterArtworkRequest.SecondaryNodeRequest
	(*WalletNodeRegisterArtworkRequest_UploadImageRequest)(nil),   // 5: proto.WalletNodeRegisterArtworkRequest.UploadImageRequest
	(*WalletNodeRegisterArtworkRequest_SendTicketRequest)(nil),    // 6: proto.WalletNodeRegisterArtworkRequest.SendTicketRequest
	(*WalletNodeRegisterArtworkReply_Error)(nil),                  // 7: proto.WalletNodeRegisterArtworkReply.Error
	(*WalletNodeRegisterArtworkReply_PrimaryNodeReply)(nil),       // 8: proto.WalletNodeRegisterArtworkReply.PrimaryNodeReply
	(*WalletNodeRegisterArtworkReply_SecondaryNodeReply)(nil),     // 9: proto.WalletNodeRegisterArtworkReply.SecondaryNodeReply
	(*WalletNodeRegisterArtworkReply_UploadImageReply)(nil),       // 10: proto.WalletNodeRegisterArtworkReply.UploadImageReply
	(*WalletNodeRegisterArtworkReply_SendTicketReply)(nil),        // 11: proto.WalletNodeRegisterArtworkReply.SendTicketReply
	(*WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer)(nil),  // 12: proto.WalletNodeRegisterArtworkReply.PrimaryNodeReply.Peer
}
var file_walletnode_proto_depIdxs = []int32{
	3,  // 0: proto.WalletNodeRegisterArtworkRequest.primary_node:type_name -> proto.WalletNodeRegisterArtworkRequest.PrimaryNodeRequest
	4,  // 1: proto.WalletNodeRegisterArtworkRequest.secondary_node:type_name -> proto.WalletNodeRegisterArtworkRequest.SecondaryNodeRequest
	5,  // 2: proto.WalletNodeRegisterArtworkRequest.upload_image:type_name -> proto.WalletNodeRegisterArtworkRequest.UploadImageRequest
	6,  // 3: proto.WalletNodeRegisterArtworkRequest.send_ticket:type_name -> proto.WalletNodeRegisterArtworkRequest.SendTicketRequest
	8,  // 4: proto.WalletNodeRegisterArtworkReply.primary_node:type_name -> proto.WalletNodeRegisterArtworkReply.PrimaryNodeReply
	9,  // 5: proto.WalletNodeRegisterArtworkReply.secondary_node:type_name -> proto.WalletNodeRegisterArtworkReply.SecondaryNodeReply
	10, // 6: proto.WalletNodeRegisterArtworkReply.upload_image:type_name -> proto.WalletNodeRegisterArtworkReply.UploadImageReply
	11, // 7: proto.WalletNodeRegisterArtworkReply.send_ticket:type_name -> proto.WalletNodeRegisterArtworkReply.SendTicketReply
	0,  // 8: proto.WalletNodeRegisterArtworkReply.Error.status:type_name -> proto.WalletNodeRegisterArtworkReply.Error.Status
	12, // 9: proto.WalletNodeRegisterArtworkReply.PrimaryNodeReply.peers:type_name -> proto.WalletNodeRegisterArtworkReply.PrimaryNodeReply.Peer
	7,  // 10: proto.WalletNodeRegisterArtworkReply.PrimaryNodeReply.error:type_name -> proto.WalletNodeRegisterArtworkReply.Error
	7,  // 11: proto.WalletNodeRegisterArtworkReply.SecondaryNodeReply.error:type_name -> proto.WalletNodeRegisterArtworkReply.Error
	7,  // 12: proto.WalletNodeRegisterArtworkReply.UploadImageReply.error:type_name -> proto.WalletNodeRegisterArtworkReply.Error
	7,  // 13: proto.WalletNodeRegisterArtworkReply.SendTicketReply.error:type_name -> proto.WalletNodeRegisterArtworkReply.Error
	1,  // 14: proto.WalletNode.RegisterArtowrk:input_type -> proto.WalletNodeRegisterArtworkRequest
	2,  // 15: proto.WalletNode.RegisterArtowrk:output_type -> proto.WalletNodeRegisterArtworkReply
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_walletnode_proto_init() }
func file_walletnode_proto_init() {
	if File_walletnode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_walletnode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkRequest_PrimaryNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkRequest_SecondaryNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkRequest_UploadImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkRequest_SendTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply_PrimaryNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply_SecondaryNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply_UploadImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply_SendTicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_walletnode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletNodeRegisterArtworkReply_PrimaryNodeReply_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_walletnode_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WalletNodeRegisterArtworkRequest_PrimaryNode)(nil),
		(*WalletNodeRegisterArtworkRequest_SecondaryNode)(nil),
		(*WalletNodeRegisterArtworkRequest_UploadImage)(nil),
		(*WalletNodeRegisterArtworkRequest_SendTicket)(nil),
	}
	file_walletnode_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WalletNodeRegisterArtworkReply_PrimaryNode)(nil),
		(*WalletNodeRegisterArtworkReply_SecondaryNode)(nil),
		(*WalletNodeRegisterArtworkReply_UploadImage)(nil),
		(*WalletNodeRegisterArtworkReply_SendTicket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_walletnode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_walletnode_proto_goTypes,
		DependencyIndexes: file_walletnode_proto_depIdxs,
		EnumInfos:         file_walletnode_proto_enumTypes,
		MessageInfos:      file_walletnode_proto_msgTypes,
	}.Build()
	File_walletnode_proto = out.File
	file_walletnode_proto_rawDesc = nil
	file_walletnode_proto_goTypes = nil
	file_walletnode_proto_depIdxs = nil
}
